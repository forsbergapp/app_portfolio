App portfolio

A platform to build your app portfolio.
With most necessary technology configured to get started and with less
library and module dependencies for performance and better maintainability
with code you have control over.
Microservice architecture with monitoring of each microservice activity.
Services included are authentication, database, forms, report, geolocation, log, mail
and worldcities.
Runs in Node.js using Express framework.
Apps are component structured and server-side rendered with database data popluation.
REST API with authentication middleware supporting both mySQL and Oracle Database.
Admin single page web app (SPA) with sourcecode secured using authentication credentials.
Includes 
	Startpage to display your app portfolio.
	Oracle SQL Developer Data model designed data model.
	Scripts to create in mySQL or Oracle Database.
	Server parameters controlled from Node.js server and app parameters from database.

	App1 - Timetables app
	Progressive web app (PWA) and a single page web app (SPA).
	Worlds most advanced traditional prayer timetable calculation.
	All known regional settings, all languagues and all countries supported.
	Navigate in calendar per day, month or year in Gregorian or Hijri
	calendar type in realtime.
	Facebook Login and Google Identity or create local user with user verification.
	App can be used without registering but then settings can't be saved.
	Map integration with automatic timezone and GPS lookup.
	QR code dynamic generation.
	Social network functionality with profile, like, follow, view other user settings and statistics.
	Centralized data model error handling of database errors, constraints errors and 
	application errors and showed in users language.
	Timetables can be displayed with different themes using CSS3.
	User interface and timetables can be displayed in any language with help of Google Noto Fonts
	and translation of user interface is fetched from translation objects data model.
	
	Server generated PDF and HTML generated timetables are pixel perfect designed using pt font sizes
	and timetable paper size supported are A4 and Letter.
	Different application themes available from about dialogue.
	App is written in pure Javascript and ES6 Javascript is often used in both client and server.

	App 2 - Property management app
	Data model displayed at the moment.
	Data model supports:
	- management of a property with multiple owners, multiple subtypes of properties, 
	  owner of multiple properties, facility management and vechicle access management
	- economic adminstration
		- bills
		- payments
		- receipts for owners, contact groups representing one or more properties
		- accounting ledger and journal, multicurrency support
		- staff management
		- salary
		- quota calculations for condominum properties
		- bank management
	- investment of assets, real estate, currency, exchange tradable(stock, future, energy), 
	  exchange cryptocurrency and basic stock exchange trading model
	- contact management, in groups or shared ownerships, representation for owners, tenants, 
	  guests
	- booking reservation facility, network access management
	- service management water, electricity, internet, phone lines etc
	- board of directors management with reunion schedule

installation instructions

1. install Node.js on server

	modules required:
	npm install axios bcryptjs dotenv express helmet jsonwebtoken mysql nodemailer oracledb
	npm install puppeteer
	//puppeteer on Linux with additional yum installations:
		npm install puppeteer --unsafe-perm=true
		sudo yum install atk
		sudo yum install at-spi2-atk
		sudo yum install cups-libs
		sudo yum install libdrm
		sudo yum install libxkbcommon
		sudo yum install libXcomposite
		sudo yum install libXdamage
		sudo yum install libXrandr
		sudo yum install mesa-libgbm
		sudo yum install pango
		sudo yum install alsa-lib

	npm install -g pm2

2. install mysql/oracle on same server or other server

   For Oracle Database, install Oracle Instant Client
   www.oracle.com/database/technologies/instant-client.html

   See .env file for Oracle Instant Client variables.

   use Unicode characterset to support emojis and all languages

   run scripts/mysql.ddl as root in mysql database or
   run script/oracle.ddl as admin/dba in oracle database

   USER CREATED			ROLE AND APP_ID INFO
   ------------			--------------------
   app_portfolio		role ROLE_APP_DBA
						database user, do not use in app,
						use app users with less privileges
						for a more secure app

   app_admin			role ROLE_APP_ADMIN
						app admin in app
						DELETE/INSERT/SELECT/UPATE all tables, but no DDL
   app0					role ROLE_APP0
						app_id=0
   
   app1 				role ROLE_APP1
						app_id=1
   
   app2 				role ROLE_APP2
						app_id=2

   default passsword APP_1_portfolio for all users

   run in app_portfolio mysql database or oracle schema:
   import scripts/import.sql
   import language scripts/*.sql files

3. register Google Identity
   requires hostname
   https://console.developers.google.com/

   if not using Google
   set database parameter USER_PROVIDER1_USE=0
   hides login button and app will not use SDK

   default USER_PROVIDER1_USE=1

4. register Facebook login

   https://developers.facebook.com/docs/facebook-login/web

   if not using Facebook 
   set database parameter USER_PROVIDER1_USE=0
   hides login button and app will not use SDK

   default USER_PROVIDER2_USE=1

5. register mapbox 
   get access token
   https://docs.mapbox.com/api/overview/

   map does not work without this access token.
   
6. register email provider to send from server
   hostname, port, username, password
   Check if email provider allows sending from apps if using free account.

7. generate ssl files for https, start using letsencrypt for a domain and
   use self sign for localhost or use ssl provider of your choice

8. download from Github

   mkdir app_portfolio
   cd app_portfolio
   git clone https://github.com/appportfolio/app_portfolio.git

9. create .env file in /app_portfolio
set values in {} and modify default values if necessary
change default db password
format BLOCKIP.txt content, without comment and in an array:
[
	["0.0.0.0", "0.0.0.255"],
    ["1.1.1.1", "1.1.1.1"] 
]
leave SERVICE_AUTH_BLOCK_IP_RANGE empty if no blocking
if you want the whole request in each access in server log
set SERVICE_LOG_ENABLE_SERVER_VERBOSE=1

#server variables
SERVER_HTTPS_KEY                        			={PATH}\{FILENAME}
SERVER_HTTPS_CERT                       			={PATH}\{FILENAME}
SERVER_PORT                             			=80
SERVER_HTTPS_PORT                       			=443
SERVER_JSON_LIMIT                          			=10MB
SERVER_ADMIN_NAME									={ADMIN_USERNAME}
SERVER_ADMIN_PASSWORD								={ADMIN_PASSWORD}
#service variables
SERVICE_AUTH_BLOCK_IP_RANGE                 		={PATH/BLOCKIP.txt}
SERVICE_AUTH_ADMIN_TOKEN_EXPIRE_ACCESS				=1d
SERVICE_AUTH_ADMIN_TOKEN_SECRET						={ADMIN_TOKEN_SECRET}
#What database to use
#1=DB1 mySQL, 2=DB2 Oracle
SERVICE_DB_USE                           			=1
#mySQL
SERVICE_DB_DB1_APP_ADMIN_USER               		=app_admin
SERVICE_DB_DB1_APP_ADMIN_PASS               		=APP_1_portfolio
SERVICE_DB_DB1_APP0_USER                         	=app0
SERVICE_DB_DB1_APP0_PASS                         	=APP_1_portfolio
SERVICE_DB_DB1_PORT                         		={PORT}
SERVICE_DB_DB1_HOST                         		={HOSTNAME} (or localhost)
SERVICE_DB_DB1_NAME                         		=app_portfolio
SERVICE_DB_DB1_CHARACTERSET                 		='utf8mb4'
SERVICE_DB_DB1_CONNECTION_LIMIT             		=10
#Oracle
SERVICE_DB_DB2_APP_ADMIN_USER               		=app_admin
SERVICE_DB_DB2_APP_ADMIN_PASS               		=APP_1_portfolio
SERVICE_DB_DB2_APP0_USER                         	=app0
SERVICE_DB_DB2_APP0_PASS                         	=APP_1_portfolio
SERVICE_DB_DB1_NAME                         		=app_portfolio
SERVICE_DB_DB2_CONNECTSTRING                		={CONNECTION STRING}
SERVICE_DB_DB2_POOL_MIN                     		=1
SERVICE_DB_DB2_POOL_MAX                     		=1
SERVICE_DB_DB2_POOL_INCREMENT               		=0
#Oracle Instant Client path
SERVICE_DB_DB2_LIBDIR								={ORACLE_INSTANT_CLIENT_PATH}
SERVICE_DB_DB2_CONFIGDIR							={PATH_TNSNAMES_SQLNET_OR_WALLET_FILE_CONTENT}

SERVICE_LOG_SCOPE_SERVER                    		='SERVER'
SERVICE_LOG_SCOPE_SERVICE                   		='SERVICE'
SERVICE_LOG_SCOPE_DB                        		='DB'
SERVICE_LOG_SCOPE_ROUTER                    		='ROUTER'
SERVICE_LOG_SCOPE_CONTROLLER                		='CONTROLLER'
SERVICE_LOG_ENABLE_SERVER_INFO						={0=NO, 1=YES}
SERVICE_LOG_ENABLE_SERVER_VERBOSE					={0=NO, 1=YES}
SERVICE_LOG_ENABLE_DB                       		={0=NO, 1=YES}
SERVICE_LOG_ENABLE_ROUTER                   		={0=NO, 1=YES}
SERVICE_LOG_LEVEL_VERBOSE		    				='VERBOSE'
SERVICE_LOG_LEVEL_ERROR                     		='ERROR'
SERVICE_LOG_LEVEL_INFO                      		='INFO'
SERVICE_LOG_DESTINATION                     		={0=FILE ONLY
                                                      1=URL ONLY REST API METHOD POST
                                                      2=FILE AND URL}
SERVICE_LOG_URL_DESTINATION                 		={URL TO REST API METHOD POST}
SERVICE_LOG_URL_DESTINATION_USERNAME        		={USERNAME}
SERVICE_LOG_URL_DESTINATION_PASSWORD        		={PASSWORD}
SERVICE_LOG_FILE_INTERVAL                   		={1D or 1M}
SERVICE_LOG_FILE_PATH_SERVER                		={PATH with / at the end}
SERVICE_LOG_DATE_FORMAT                     		={DEFAULT empty creates ISO8601 format
													  ex: "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"}
SERVICE_LOG_PM2_FILE                        		={filename.json}
APP0_ID						                		=0

10. database parameters
update scripts/import.sql or after import, observe db username and password for apps 
are in APP_PARAMETER table, admin and app0 in .env file.

table app
set app url and logo

update {...} values in table app_parameter
they have parameter_type_id 1 or 2
1 = Private shared values sent to app
2 = Private values with passwords and sensitive data only available from NodeJS server

11. run app on any supported Node.js platform
   	starts without logging and restarts automatically when files are changed:
   	pm2 start server.js --name app_portfolio -o "/dev/null" -e "/dev/null" --watch --ignore-watch=".well-known logs node_modules"
	start JSON log:
	windows:
	start /b pm2 logs --json>{SERVICE_LOG_FILE_PATH_SERVER}{SERVICE_LOG_PM2_FILE}
	linux:   
	nohup pm2 logs --json>{SERVICE_LOG_FILE_PATH_SERVER}{SERVICE_LOG_PM2_FILE} &

12. how to add new app
	update db script:
	scripts/mysql.ddl
	script/oracle.ddl
	scripts/import.sql
	scripts/*.sql language files

	add files and folders
	/apps/{APP_ID}*					contains client app files and server code
	/apps/{APP_ID}/server.js		read by function load_apps_code() in /server.js
									contains function getApp, const APP{APP_ID}_ID = {APP_ID} (ex APP1_ID = 1)
									(loaded dynamically in server.js and should be unique variable name),
									express app.use() and app.get() declarations
	/apps/{APP_ID}/client.js		read by service/forms/forms.controller.js
									contains function getApp(app_id, params) to start client app				
	/apps/{APP_ID}/report			reports
	/service/db/api/app{APP_ID}*	rest api for app{APP_ID}