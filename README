App portfolio

A platform to build your app portfolio.
With most necessary technology configured to get started and with less
third party libraries and module dependencies for performance and better maintainability
with code you have control over.
Microservice architecture with monitoring of each microservice activity.
Services included are authentication, database, forms, report, geolocation, log, mail
and worldcities.
Runs in Node.js using Express framework.
Apps are component structured and server-side rendered with database data popluation.
Secure REST API with authentication middleware supporting both mySQL and Oracle Database.
Apps are written using pure CSS, HTML and Javascript and ES6+ Javascript using
AJAX method and JSON in both client and server.
Oracle SQL Developer Data model designed data model.
Scripts to create in mySQL or Oracle Database.
Centralized data model error handling of database errors, constraints errors and 
application errors and showed in users language.
A global support implemented in client with ALL Unicode characters supported by Noto Sans font
included different arabic scripts and different font heights (Nastaliq).
Any regional setting supported including right to left. More than 500 locales with language and
country translations. The mayor 30 languages are translated in the apps. Icons are frequently
used to minmize text usage and to provide simplier and better explanation to a global audience.

Includes 

	1.App 0 - Admin single page web app (SPA) with sourcecode secured using authentication credentials
	and dynamically loads app code after login. Logout deletes secured app code and deletes
	any traces still running as SPA. App monitors database, users and apps, can broadcast messages
	or remotely shutdown apps for maintenance, provides user statistics in graphs created by 
	pure css, javascript and html, maintains apps parameters and full log functionality including
	log of server, apps, routers, controllers, services and SQL.

	2.App 1 - Main single page app to display your app portfolio.
	Social network functionality with profile, like, follow, view other user settings and statistics.

	3.App2 - Timetables app
	Progressive web app (PWA) and a single page web app (SPA).
	Worlds most advanced timetable calculation.
	All known regional settings, all languagues and all countries supported.
	Navigate in calendar per day, month or year in Gregorian or Hijri calendar type in realtime.
	App can be used without registering but then settings can't be saved.
	Map integration with automatic timezone and GPS lookup.
	QR code dynamic generation.
	Timetables can be displayed with different themes using CSS3.
	User interface and timetables can be displayed in any language
	and translation of user interface is fetched from translation objects data model.
	
	Server generated PDF and HTML generated timetables are pixel perfect designed using pt font sizes
	and timetable paper size supported are A4 and Letter.
	Different application themes available from about dialogue.

	Example of complexity of this application:
	Use case:
	A swedish timetable admin who only speaks english and swedish wants to help turkish user creating timetable 
	in arabic and turkish including transliteration of arabic text and showing both gregorian and hijri calendar
	in the same timetable. 
	They live in India so local settings including number system Devanagari numerals (deva in navigator) should be used.
	Header and footer will contain some chinese and urdu with Nastaliq to provide information to guests.
	Timetable shall include all timezones in the current and displayed in the same timetable.
	To keep timetable modern some emojis will be displayed in the timetable. PDF url with QRCode will be shared
	on their social network and if the timetable is printed and on a wall, passing user can scan QR code with the url
	to their phones and download PDF. Preview of future Hijri month Ramadan timetable will be sent by PDF.

	Use case in the app:
	User works remotely and can choose swedish as user preference displaying message in swedish and seeing 
	regional settings in swedish in left to right environment and local timezone.
	User can design a timetable in bilanguage, first language arabic second turkish using right to left layout
	showing result in timetable in right to left in arabic and turkish.
	User creates different timetables with different timezone settings according to chosen GPS
	positions, that is looked up in the map in settings, in the same timetable.
	User can keep track of local timezone in settings while working with other timezones.
	User get swedish text messages and ui is in swedish and can see other languages in the timetable.
	User choose to display both transliteration and translation in the timetable.
	User change the arabic timetable to show numbersystem deva and display second calendar on timetable.
	User can create pixel perfect PDF with any Unicode character incuding emojis and custom fonts according to theme chosen.
	User can preview any past or future timetable date period in Gregorian or Hijri and can save to PDF or print.
	User copies encoded PDF url (to secure privacy) in settings for day, month and year timetable to be shared.


	4.App 3 - Presentation app
	Created to show how a simple app can be installed.
	Includes diagram and data model of app portfolio and a data model for future project.

	Data model supports:
	- management of a property with multiple owners, multiple subtypes of properties, 
	  owner of multiple properties, facility management and vechicle access management
	- economic adminstration
		- bills
		- payments
		- receipts for owners, contact groups representing one or more properties
		- accounting ledger and journal, multicurrency support
		- staff management
		- salary
		- quota calculations for condominum properties
		- bank management
	- investment of assets, real estate, currency, exchange tradable(stock, future, energy), 
	  exchange cryptocurrency and basic stock exchange trading model
	- contact management, in groups or shared ownerships, representation for owners, tenants, 
	  guests
	- booking reservation facility, network access management
	- service management water, electricity, internet, phone lines etc
	- board of directors management with reunion schedule

Installation instructions

1. install Node.js on server

	modules required:
	npm install axios bcryptjs dotenv express helmet jsonwebtoken mysql nodemailer oracledb
	npm install puppeteer
	//puppeteer on Linux with additional yum installations:
		npm install puppeteer --unsafe-perm=true
		sudo yum install atk
		sudo yum install at-spi2-atk
		sudo yum install cups-libs
		sudo yum install libdrm
		sudo yum install libxkbcommon
		sudo yum install libXcomposite
		sudo yum install libXdamage
		sudo yum install libXrandr
		sudo yum install mesa-libgbm
		sudo yum install pango
		sudo yum install alsa-lib

	npm install -g pm2

2. install mysql/oracle on same server or other server

   	For Oracle Database, install Oracle Instant Client
   	www.oracle.com/database/technologies/instant-client.html

   	See .env file for Oracle Instant Client variables.

   	use Unicode characterset to support emojis and all languages

   	run 
	scripts/mysql.ddl 					as root in mysql database
   	script/oracle.ddl 					as admin/dba in oracle database
	script/oracle_grants_app_admin.sql 	as admin/dba in oracle database
										contains grants for admin app
										not definable in Oracle SQL Developer Data model

   	USER CREATED		ROLE AND APP_ID INFO
   	------------		--------------------
   	app_portfolio		role ROLE_APP_DBA
						database user, do not use in app,
						use app users with less privileges
						for a more secure app

   	app_admin			role ROLE_APP_ADMIN
						app admin in app
						DELETE/INSERT/SELECT/UPATE all tables, but no DDL
   	app1				role ROLE_APP1
						app_id=1
   
   	app2 				role ROLE_APP2
						app_id=2
   
   	app3 				role ROLE_APP3
						app_id=3

   	default passsword APP_1_portfolio for all users

   	run in app_portfolio mysql database or oracle schema:
   	import scripts/import.sql
   	import language scripts/*.sql files

3. sign in provider management
   
   	disabled support because of providers not supporting single page application (SPA)
   	project only allows SPA, however datamodel and all SPA support provider usage for future use
   	and to display how to integrate external user providers

   	TABLE identity_provider
   	ID PROVIDER_NAME API_SRC API_SRC2 	API_VERSION API_ID 	IDENTITY_PROVIDER_ORDER ENABLED
   	1  Provider1		url		js file		version		api key	1						0/1
   	2  Provider2		url		js file		version		api key	2						0/1

   	enabled = 0 means no logon button will be displayed and no sdk will be loaded

   	apps/common/js/common.js
		init_providers()		provider db control
		provider_init()			provider init
		updateProviderUser()	provider login
		onProviderSignIn()		provider login management

4. register mapbox 
   	get access token
   	https://docs.mapbox.com/api/overview/

   	map does not work without this access token.
   
5. register email provider to send from server
   	hostname, port, username, password
   	Check if email provider allows sending from apps if using free account.

6. generate ssl files for https, start using letsencrypt for a domain and
	use self sign for localhost or use ssl provider of your choice

7. download from Github

	mkdir app_portfolio
   	cd app_portfolio
   	git clone https://github.com/appportfolio/app_portfolio.git

	.gitignore content:
		.vscode/									for Visual Code development
		config/										configuration files
		dev/										development files, put your private work here
		logs/										log files
		production_.env/							keep copy of production files
		node_modules/								NodeJS modules (400Mb+)
		service/db/config/oracle_instantclient/		Oracle Client
		service/report/tmp/							temporary Report directory
		ssl/										SSL certificates used by parameters
													SERVER_HTTPS_KEY and SERVER_HTTPS_CERT

8. create .env file in /app_portfolio
	recommended paths
	/config				configuration files
	/logs				log files
	/service/db/config	Oracle client

	hardcoded temporary directory
	/service/report/tmp	configured in /service/report/report.service.js

	set values in {} and modify default values if necessary

	#server variables
	SERVER_HTTPS_KEY                        			={PATH}\{FILENAME}
	SERVER_HTTPS_CERT                       			={PATH}\{FILENAME}
	SERVER_PORT                             			=80
	SERVER_HTTPS_PORT                       			=443
	SERVER_JSON_LIMIT                          			=10MB
	SERVER_ADMIN_NAME									={ADMIN_USERNAME}
	SERVER_ADMIN_PASSWORD								={ADMIN_PASSWORD}
	#service variables
	SERVICE_AUTH_ACCESS_CONTROL_ENABLE          		={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_IP             			={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_IP_PATH         		={PATH}\blockip.json
	SERVICE_AUTH_ACCESS_CONTROL_HOST_EXIST      		={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_ACCESS_FROM     		={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_USER_AGENT      		={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_USER_AGENT_PATH 		={PATH}\safe_user_agent.json
	SERVICE_AUTH_ACCESS_CONTROL_USER_AGENT_EXIST		={0=NO, 1=YES}
	SERVICE_AUTH_ACCESS_CONTROL_ACCEPT_LANGUAGE 		={0=NO, 1=YES}
	SERVICE_AUTH_POLICY_DIRECTIVES              		={PATH}\policy_directives.json
	SERVICE_AUTH_ADMIN_TOKEN_EXPIRE_ACCESS	    		=1d
	SERVICE_AUTH_ADMIN_TOKEN_SECRET		        		={ADMIN_TOKEN_SECRET}
	SERVICE_AUTH_ENABLE_GEOLOCATION						={0=NO, 1=YES}
	#What database to use
	#1=DB1 mySQL, 2=DB2 Oracle
	SERVICE_DB_USE                           			=1
	#mySQL
	SERVICE_DB_DB1_APP_ADMIN_USER               		=app_admin
	SERVICE_DB_DB1_APP_ADMIN_PASS               		=APP_1_portfolio
	SERVICE_DB_DB1_PORT                         		={PORT}
	SERVICE_DB_DB1_HOST                         		={HOSTNAME} (or localhost)
	SERVICE_DB_DB1_NAME                         		=app_portfolio
	SERVICE_DB_DB1_CHARACTERSET                 		='utf8mb4'
	SERVICE_DB_DB1_CONNECTION_LIMIT             		=10
	#Oracle
	SERVICE_DB_DB2_APP_ADMIN_USER               		=app_admin
	SERVICE_DB_DB2_APP_ADMIN_PASS               		=APP_1_portfolio
	SERVICE_DB_DB1_NAME                         		=app_portfolio
	SERVICE_DB_DB2_CONNECTSTRING                		={CONNECTION STRING}
	SERVICE_DB_DB2_POOL_MIN                     		=1
	SERVICE_DB_DB2_POOL_MAX                     		=1
	SERVICE_DB_DB2_POOL_INCREMENT               		=0
	#Oracle Instant Client path
	SERVICE_DB_DB2_LIBDIR								={ORACLE_INSTANT_CLIENT_PATH}
	SERVICE_DB_DB2_CONFIGDIR							={PATH_TNSNAMES_SQLNET_OR_WALLET_FILE_CONTENT}

	SERVICE_LOG_SCOPE_SERVER                    		='SERVER'
	SERVICE_LOG_SCOPE_SERVICE                   		='SERVICE'
	SERVICE_LOG_SCOPE_DB                        		='DB'
	SERVICE_LOG_SCOPE_ROUTER                    		='ROUTER'
	SERVICE_LOG_SCOPE_CONTROLLER                		='CONTROLLER'
	SERVICE_LOG_ENABLE_SERVER_INFO						={0=NO, 1=YES}
	SERVICE_LOG_ENABLE_SERVER_VERBOSE					={0=NO, 1=YES}
	SERVICE_LOG_ENABLE_DB                       		={0=NO, 1=YES}
	SERVICE_LOG_ENABLE_ROUTER                   		={0=NO, 1=YES}
	SERVICE_LOG_LEVEL_VERBOSE		    				='VERBOSE'
	SERVICE_LOG_LEVEL_ERROR                     		='ERROR'
	SERVICE_LOG_LEVEL_INFO                      		='INFO'
	SERVICE_LOG_DESTINATION                     		={0=FILE ONLY
														  1=URL ONLY REST API METHOD POST
														  2=FILE AND URL}
	SERVICE_LOG_URL_DESTINATION                 		={URL TO REST API METHOD POST}
	SERVICE_LOG_URL_DESTINATION_USERNAME        		={USERNAME}
	SERVICE_LOG_URL_DESTINATION_PASSWORD        		={PASSWORD}
	SERVICE_LOG_FILE_INTERVAL                   		={1D or 1M}
	SERVICE_LOG_FILE_PATH_SERVER                		={PATH with / at the end}
	SERVICE_LOG_DATE_FORMAT                     		={DEFAULT empty creates ISO8601 format
														ex: "yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'"}
	SERVICE_LOG_PM2_FILE                        		={filename.json}
	COMMON_APP_ID						                =0

	detailed parameter info:
	SERVICE_AUTH_ACCESS_CONTROL_IP_PATH
		/config/blockip.json
		contains IP v4 range to block, do not comment in file, array format:
		[
			["0.0.0.0", "0.0.0.255"],
			["1.1.1.1", "1.1.1.1"] 
		]
		leave SERVICE_AUTH_BLOCK_IP_RANGE empty if no blocking
		this can be integrated with iptables on Linux or other operating system service
		will return HTTP 403 Forbidden if IP blocked
	SERVICE_AUTH_ACCESS_CONTROL_USER_AGENT_EXIST:
		check if ok to have empty user agent or not
	SERVICE_AUTH_ACCESS_CONTROL_USER_AGENT_PATH:
		/config/safe_user_agent.json
		contains user agent that you want to allow, examples:
		{"user_agent": [
			{"Name": "YahooMailProxy", 
				"user_agent": "YahooMailProxy; https://help.yahoo.com/kb/yahoo-mail-proxy-SLN28749.html"},
			{"Name": "Facebook Privacy Policy validation", 
				"user_agent": "facebookexternalhit/1.1 (+http://www.facebook.com/externalhit_uatext.php)"},
			{"Name": "Let's Encrypt validation", 
				"user_agent": "Mozilla/5.0 (compatible; Let's Encrypt validation server; +https://www.letsencrypt.org)"}
		]
		}
	SERVICE_AUTH_POLICY_DIRECTIVES:
		/config/policy_directives.json
		Content Security Policy using helmet middleware
		service providers and other providers need to load their fonts, styles and javascript
		replace domain1.com, domain2.com with desired domain to allow

		{"directives":
			[
				{ "type": "script",
				"domain": "'self', 'unsafe-inline', 'unsafe-eval', domain1.com, domain2.com"
				},
				{ "type": "style",
				"domain": "'self', 'unsafe-inline', domain1.com, domain2.com"
				},
				{ "type": "font",
				"domain": "self, domain1.com, domain2.com"
				},
				{ "type": "frame",
				"domain": "'self', data:, domain1.com, domain2.com"
				}
			]
		}

		/service/auth/auth.controller.js 
		policy_directives() 	checks at startup in /server.js the file content
								and loads content into Content Security Policy using helmet middleware
9.  database parameters
	update scripts/import.sql or after import, observe db username and password for apps 
	are in APP_PARAMETER table, admin and app1 in .env file.

	table app
	set app name, url, logo and app category

	update {...} values in table app_parameter
	they have parameter_type_id 0, 1 or 2
	0 = Public
	1 = Private shared values sent to app 
		such as copyright info, api keys, email address or social url links
	2 = Private values with account names and passwords and sensitive data only available from NodeJS server
		such as database, auth control and email parameters

10. run app on any supported Node.js platform
   	starts without logging and restarts automatically when files are changed:
   	pm2 start server.js --name app_portfolio -o "/dev/null" -e "/dev/null" --watch --ignore-watch=".well-known logs node_modules"
	start JSON log:
	windows:
	start /b pm2 logs --json>{SERVICE_LOG_FILE_PATH_SERVER}{SERVICE_LOG_PM2_FILE}
	linux:   
	nohup pm2 logs --json>{SERVICE_LOG_FILE_PATH_SERVER}{SERVICE_LOG_PM2_FILE} &

11. how to add new app
	optional db script:
	scripts/mysql.ddl
	script/oracle.ddl
	scripts/import.sql
	scripts/*.sql language files

	required files and folders
	/apps/{APP_ID}*					contains client app files and server code
	/apps/{APP_ID}/server.js		read by function load_apps_code() in /server.js
									contains function getApp, const APP{APP_ID}_ID = {APP_ID} (ex APP1_ID = 1)
									(loaded dynamically in server.js and should be unique variable name),
									express app.use() and app.get() declarations
	/apps/{APP_ID}/client.js		read by service/forms/forms.controller.js
									contains function getApp(app_id, params) to start client app				
									/apps/{APP_ID}/client.js
	optional:
	/apps/{APP_ID}/css				styles
	/apps/{APP_ID}/images			images
	/apps/{APP_ID}/js				js
	/apps/{APP_ID}/info				info pages about disclaimer, privacy_policy, terms
	/apps/{APP_ID}/mail				mail
	/apps/{APP_ID}/report			reports
	/apps/{APP_ID}/scripts			database scripts
	/apps/{APP_ID}/sw.js			service worker for PWA apps
	/service/db/api/app{APP_ID}*	rest api for app{APP_ID}

12. App identification
	Common, admin and main app uses window.global_main_app_id that is 0 by default.
	
	Apps clients use window.global_app_id to identify themselves.
	Apps use window.global_main_app_id if main app functionality is needed.

	Apps server code reads process.env.MAIN_APP_ID for main app
	and for the apps installed they use APP{APP_ID}_ID variable in
	apps/app{APP_ID}/server.js that is used to init the server generation of the client.
	
	Admin does not use window.global_app_id but uses window.global_admin = true.
